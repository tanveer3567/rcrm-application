{"version":3,"sources":["reducers/initialState.js","constants/actionTypes.js","reducers/index.js","reducers/employeeSearch.js","api/api.js","sagas/EmployeeSaga.js","sagas/watcher.js","sagas/index.js","store/configureStore.js","components/employeeData/addEmployee.js","components/employeeData/searchEmployee.js","actions/employeeActions.js","components/dash-board/dashBoard.js","routes.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialState","employee","employees","ALL_EMPLOYEES","rootReducer","combineReducers","state","arguments","length","undefined","action","type","newState","Object","objectSpread","value","result","val","firstName","match","push","assign","handleSearchedEmployee","types","handleAllEmployeeList","baseUrl","Employees","Promise","resolve","reject","fetch","concat","then","res","json","allEmployeesSaga","regenerator_default","a","wrap","_context","prev","next","call","sent","put","t0","error","stop","_marked","this","watchAllEmployee","takeLatest","watcher_marked","startEmployeeSearch","fork","sagas_marked","configureStore","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","runSaga","run","rootSaga","Option","Select","RadioGroup","Radio","Group","FormItem","Form","Item","residences","label","AddEmployee","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","onChange","e","console","log","target","setState","handleMessageInput","bind","assertThisInitialized","handleSubmitMessage","defineProperty","name","preventDefault","form","validateFieldsAndScroll","err","values","JSON","stringify","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","prefixSelector","initialValue","react_default","createElement","es_select","style","width","es_form","row","gutter","col","className","src","default","height","rules","required","message","input","placeholder","lastName","homePhone","addonBefore","workPhone","dob","es_radio","cascader","options","float","es_button","onClick","Component","wrappedAddEmployee","create","SearchEmployee","empdata","searchedEmployee","dispatch","onSubmit","table","columns","title","dataIndex","dataSource","size","connect","Header","Layout","Content","Footer","Sider","SubMenu","Row","Col","Menu","DashBoard","onButtonClicked","isAdd","isAddEmp","isSearchEmp","_this2","_this$state","layout","minHeight","menu","defaultSelectedKeys","mode","alt","key","icon","background","padding","margin","employeeData_addEmployee","searchEmployee","textAlign","routes","BrowserRouter","Switch","Route","exact","path","render","dash_board_dashBoard","Redirect","to","App","Boolean","window","location","hostname","store","ReactDOM","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7130e8e5.chunk.js","sourcesContent":["export default {\n    employee: [],\n    employees: []\n\n}","export const EMPLOYEE_LOAD_SUCCESS= 'EMPLOYEE_LOAD_SUCCESS';\nexport const SEARCHED_EMPLOYEE= 'SEARCHED_EMPLOYEE';\nexport const SEARCH_MEDIA_ERROR = 'SEARCH_MEDIA_ERROR';\nexport const ALL_EMPLOYEES = 'ALL_EMPLOYEES';","import employee from './employeeSearch';\nimport {combineReducers} from 'redux';\nconst rootReducer = combineReducers({\n    employee\n})\n\nexport default rootReducer;\n\n// import initialState from './initialState';\n// import * as types from '../constants/actionTypes';\n\n// const reducer = (state, action) => {\n//     // console.log('im reducer')\n//     switch(action.type){\n//         // case types.EMPLOYEE_LOAD_SUCCESS:\n//         // return  Object.assign({}, state, action.videos)\n//         case types.SEARCHED_EMPLOYEE:\n//             let newState = {...state};\n//             if(action.employee !== undefined){\n//             newState = Object.assign({}, state, {employee : Object.assign({}, action.employee)})\n//             } \n//             return {...newState};\n//             // else`{ \n//                 // return 'bull shit'\n//             // }\n//         // return [...state, action];\n//         default:\n//         return state;\n//     }\n// }\n// export default reducer;","// import initialState from './initialState';\n// import * as types from '../constants/actionTypes';\n\n// export default function (state = initialState.employees, action){\n//     switch(action.type){\n//         // case types.EMPLOYEE_LOAD_SUCCESS:\n//         // return  Object.assign({}, state, action.videos)\n//         case types.SEARCHED_EMPLOYEE:\n//         return {...state, searchedEmployee: action.employee._id};\n//         default:\n//         return state;\n//     }\n// }\n\n\nimport initialState from './initialState';\nimport * as types from '../constants/actionTypes';\n\n\nconst handleAllEmployeeList = (state, action) => {\n    let newState = { ...state };\n    if (action.employees != undefined) {\n        newState = Object.assign({}, state, { employees: action.employees })\n    }\n    // console.log(newState)\n    return { ...newState };\n\n}\n\nconst handleSearchedEmployee = (state, action) => {\n    // console.log('im reducer')\n    let newState = { ...state };\n    if (action.value != undefined) {\n        let result = [];\n        for (let val in state.employees) {\n            if (state.employees[val].firstName.match(action.value)) {\n                result.push(state.employees[val])\n            }\n        }\n        newState = Object.assign({}, state, { employee: result })\n    }\n    return { ...newState };\n\n}\n\n\nexport default (state = initialState, action) => {\n    // console.log('im reducer')\n    switch (action.type) {\n        // case types.EMPLOYEE_LOAD_SUCCESS:\n        // return  Object.assign({}, state, action.videos)\n        case types.SEARCHED_EMPLOYEE:\n\n            // let newState = {...state};\n            // if(action.employee !== undefined){\n            // newState = Object.assign({}, state,{employee : action.employee})\n            // // newState = Object.assign({}, state, action.employee)\n            // }\n            // return {...newState};\n            return handleSearchedEmployee(state, action);\n        case types.ALL_EMPLOYEES:\n            return handleAllEmployeeList(state, action);\n\n        default:\n            return state;\n    }\n}","// import { resolve } from \"url\";\n// const baseUrl = 'http://localhost:3010';\nconst baseUrl = 'https://swag-api.herokuapp.com';\nlet that = this;\nexport const EmployeeData = (searchQuery) =>{\n        //1\n        \n        var promise = new Promise((resolve,reject) => {\n//        2\n            fetch(`${baseUrl}/product?firstName=${searchQuery}`)\n            .then(res => {\n                //then is chained to whatever fetch is returning\n                    // 4\n                    // console.log(res.json())\n\n                resolve (res.json());\n             //json takes the response and converts to json \n            })\n        // });\n//        3\n    })\n    // console.log(promise)\n    return promise;\n}\n\n\n\nexport const Employees = () =>{\n    //1\n    var promise = new Promise((resolve,reject) => {\n//        2\n        fetch(`${baseUrl}/products`)\n        .then(res => {\n            //then is chained to whatever fetch is returning\n                // 4\n                // console.log(res.json())\n\n            resolve (res.json());\n         //json takes the response and converts to json \n        })\n    // });\n//        3\n})\n// console.log(promise)\nreturn promise;\n}\n\n\n// export default EmployeeData;//ES6 format of module.export\n","import { all, put, call } from 'redux-saga/effects';\nimport { EmployeeData, Employees } from '../api/api';\nimport * as types from '../constants/actionTypes';\n\n// export function* searchEmployeeSaga({value}){\n// export function* searchEmployeeSaga(value) {\n\n//     try {\n//         yield put({ type: types.SEARCHED_EMPLOYEE, value })\n\n//     } catch (error) {\n//         yield put({ type: 'SEARCH_EMPLOYEE_ERROR', error });\n//     }\n// }\n\nexport function* allEmployeesSaga() {\n    try {\n        // console.log(payload+'here I am ');\n        const employees = yield call(Employees);\n        // const employee = yield call(EmployeeData, value);\n\n        // console.log(employees);\n        yield put({ type: types.ALL_EMPLOYEES, employees: employees });\n\n\n    } catch (error) {\n        yield put({ type: 'SEARCH_EMPLOYEE_ERROR', error });\n    }\n\n}","import { takeLatest } from 'redux-saga/effects';\nimport { searchEmployeeSaga, allEmployeesSaga } from './EmployeeSaga';\nimport * as types from '../constants/actionTypes';\n\n\n\nexport default function* watchAllEmployee() {\n    yield takeLatest(types.ALL_EMPLOYEES, allEmployeesSaga)\n}\n\n// export function* watchSearchEmployee() {\n//     yield takeLatest(types.SEARCHED_EMPLOYEE, searchEmployeeSaga);\n// }\n\n","import { fork } from 'redux-saga/effects';\nimport watchAllEmployee from './watcher';\n\nexport default function* startEmployeeSearch() {\n    yield fork(watchAllEmployee);\n    // yield fork(watchSearchEmployee);\n\n}\n\n\n","import {createStore, applyMiddleware} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configureStore = () =>{\n    const sagaMiddleware = createSagaMiddleware();\n    return {\n        ...createStore(reducer, applyMiddleware(sagaMiddleware)),\n        runSaga: sagaMiddleware.run(rootSaga)\n    };\n};\n\nexport default configureStore;\n// redux saga is a library that aims to make side effects in react-redux applications easier and better","\nimport React, { Component } from 'react';\n// import { request } from 'http';\nimport request from 'superagent';\nimport { Radio, Icon, Form, Input, Row, Col, Button, Select, Cascader } from 'antd';\nimport './addEmployee.css';\n// import { Layout, Menu, Icon } from 'antd';\n// import './index.css'; \n// const { Header, Sider, Content, Footer } = Layout;\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\nconst FormItem = Form.Item;\nconst residences = [{\n    value: 'India',\n    label: 'India',\n}, {\n    value: 'United States',\n    label: 'United States',\n}];\n\nclass AddEmployee extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n\n        }\n        this.handleMessageInput = this.handleMessageInput.bind(this);\n        this.handleSubmitMessage = this.handleSubmitMessage.bind(this);\n    }\n    onChange = (e) => {\n        console.log('radio checked', e.target.value);\n        this.setState({\n            value: e.target.value,\n        });\n    }\n    handleMessageInput(e) {\n\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n        // console.log(\"xyz\"+this.state.firstName)\n    }\n    handleSubmitMessage(e) {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                console.log(\"values\" + JSON.stringify(values));\n                // request.post('https://swag-api.herokuapp.com/product')\n                // .send(values)\n                // .set('Accept', 'application/json')\n                // .end((err, res) => {\n                //     if (err) {\n                //         console.log('no error');\n                //     } else {\n                //         console.log('success');\n                //     }\n                // });\n\n            }\n        });\n        const data = {\n            // firstName: this.state.firstName,\n            // lastName: this.state.lastName,\n            // emailAddress: this.state.emailAddress,\n            // homePhone: this.state.homePhone,\n            // workPhone: this.state.workPhone,\n            // dob: this.state.dob\n        };\n        // console.log(data);\n        // request.post('https://swag-api.herokuapp.com/product')\n        //     .send(data)\n        //     .set('Accept', 'application/json')\n        //     .end((err, res) => {\n        //         if (err) {\n        //             console.log('no error');\n        //         } else {\n        //             console.log('success');\n        //         }\n        //     });\n\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '1',\n        })(\n            <Select style={{ width: 70 }}>\n                <Option value=\"1\">+1</Option>\n                <Option value=\"91\">+91</Option>\n            </Select>\n        );\n        return (\n            <div>\n                <div >\n                    <Form >\n                        <h1>Add Applicant</h1>\n\n                        <Row gutter={80}>\n\n                            <Col span={4}>\n                                <div className=\"picture\">\n                                    <img src='http://icons.iconarchive.com/icons/paomedia/small-n-flat/512/user-male-icon.png' default='image' height='200px' width='200px'></img>\n                                </div>\n                            </Col>\n                            <Col span={10} >\n                                <Row >\n                                    <FormItem {...formItemLayout} label='First-Name'>\n                                        {getFieldDecorator('firstName', {\n                                            rules: [{ required: true, message: 'Please input your username!' }],\n                                        })(\n                                            <Input\n                                                name=\"firstName\"\n                                                type=\"text\"\n                                                value={this.state.firstName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"first name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row >\n                                    <FormItem {...formItemLayout} label='Last-Name'>\n                                        {getFieldDecorator('lastName', {\n                                            rules: [{ required: true, message: 'Please input your lastName!' }],\n                                        })(\n                                            <Input\n                                                name=\"lastName\"\n                                                type=\"value\"\n                                                value={this.state.lastName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"last name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label=\"email\">\n                                        {getFieldDecorator('email', {\n                                            rules: [{\n                                                type: 'email', message: 'The input is not valid E-mail!',\n                                            }, {\n                                                required: true, message: 'Please input your E-mail!',\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"emailAddress\"\n                                                type=\"value\"\n                                                value={this.state.homePhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Email Address\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Work-Phone'>\n                                        {getFieldDecorator('workphone', {\n                                            rules: [{ required: true, message: 'Please input your number!' }],\n                                        })(\n                                            <Input\n                                                type=\"number\" addonBefore={prefixSelector} style={{ width: '100%' }} placeholder=\"work-phone\"\n                                                name=\"workPhone\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='SSN'>\n                                        {getFieldDecorator('SSN', {\n                                            rules: [{ required: true, message: 'Please input your SSN number!' }],\n                                        })(\n                                            <Input\n                                                name=\"SSN\"\n                                                type=\"number\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"xx-xxx-xxxx\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Skype-ID'>\n                                        {getFieldDecorator('skype-ID', {\n                                            rules: [{ required: true, message: 'Please input your skype-ID!' }],\n                                        })(\n                                            <Input\n                                                name=\"skypeID\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"skype-ID\"\n                                            />)}\n                                    </FormItem>\n\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='facebook-ID'>\n                                        {getFieldDecorator('facebook', {\n                                            rules: [{ required: true, message: 'Please input your facebook ID!' }],\n                                        })(\n                                            <Input\n                                                name=\"facebook\"\n                                                type=\"value\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Facebook profile URL\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Address'>\n                                        {getFieldDecorator('address', {\n                                            rules: [{ required: true, message: 'Please input your address!' }],\n                                        })(\n                                            <Input\n                                                name=\"address\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Apt or unit no.\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Clearance'>\n                                        {getFieldDecorator('Clearance', {\n                                            rules: [{ required: true, message: 'Please select your clearance!' }],\n                                        })(\n                                            <RadioGroup onChange={this.onChange} value={this.state.value}>\n                                                <Radio value={1}>YES</Radio>\n                                                <Radio value={2}>NO</Radio>\n                                            </RadioGroup>)}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label=\" Residence\">\n                                        {getFieldDecorator('residence', {\n                                            initialValue: ['United States'],\n                                            rules: [{ type: 'array', required: true, message: 'Please select your country of residence!' }],\n                                        })(\n                                            <Cascader options={residences} />\n                                        )}\n\n                                    </FormItem>\n\n                                    {/* <Input\n                                        name=\"Country\"\n                                        type=\"value\"\n                                        value={this.state.dob}\n                                        onChange={this.handleMessageInput}\n                                        placeholder=\"Country\"\n                                    /> */}\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='State'>\n                                        {getFieldDecorator('State', {\n                                            rules: [{ required: true, message: 'Please input your State!' }],\n                                        })(\n                                            <Input\n                                                name=\"State\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"State\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Technology'>\n                                        {getFieldDecorator('Technology', {\n                                            rules: [{ required: true, message: 'Please input your Technology!' }],\n                                        })(\n                                            <Input\n                                                name=\"technology\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Technology\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Primary-skills'>\n                                        {getFieldDecorator('Primary-skills', {\n                                            rules: [{ required: true, message: 'Please input your Primary skills!' }],\n                                        })(\n                                            <Input\n                                                name=\"primary-skills\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Primary-skills\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem style={{ float: 'right', width: '66.5%' }}>\n                                        {/* {getFieldDecorator('submit', { */}\n                                        {/* rules: [{ required: true, message: 'Please input your skills!' }], */}\n                                        {/* })( */}\n                                        <Button type='Submit' onClick={this.handleSubmitMessage}>Submit</Button>\n                                        {/* )} */}\n                                    </FormItem>\n                                </Row>\n                            </Col>\n                            <Col span={10}>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Middle-Name'>\n                                        {getFieldDecorator('middleName', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"middleName\"\n                                                type=\"text\"\n                                                value={this.state.firstName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"middle name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Nick-Name'>\n                                        {getFieldDecorator('Nick-Name', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"nickname\"\n                                                type=\"value\"\n                                                value={this.state.lastName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"nick name\"\n                                            />\n                                        )}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Date-Of-Birth'>\n                                        {getFieldDecorator('DOB', {\n                                            rules: [{ required: true, message: 'please input your date of birth' }],\n                                        })(\n                                            <Input\n                                                name=\"dob\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"MM-DD-YYYY\"\n                                            />\n                                        )}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Home-Phone'>\n                                        {getFieldDecorator('homePhone', {\n                                            rules: [{\n                                                required: false,\n                                                // message: 'Please input your home-phone number!' \n                                            }],\n                                        })(\n                                            <Input type='number' addonBefore={prefixSelector} style={{ width: '100%' }} placeholder=\"home-phone\" />\n                                        )}\n\n                                    </FormItem>\n                                    {/* <Input\n                                        name=\"homePhone\"\n                                        type=\"value\"\n                                        value={this.state.homePhone}\n                                        onChange={this.handleMessageInput}\n                                        placeholder=\"home-phone\"\n                                    /> */}\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Linked-In'>\n                                        {getFieldDecorator('Linked-In', {\n                                            rules: [{\n                                                required: false,\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"linkedIn\"\n                                                type=\"value\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"linkedIn profile URL\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Twitter'>\n                                        {getFieldDecorator('twitter', {\n                                            rules: [{\n                                                required: false,\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"twitter\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Twitter Profile URL\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Work-Authorization'>\n                                        {getFieldDecorator('work-authorization', {\n                                            rules: [{\n                                                required: true, message: 'please input your work authorization'\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"work Authorization\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Work-Authorization\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='City'>\n                                        {getFieldDecorator('City', {\n                                            rules: [{\n                                                required: true, message: 'please input your City'\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"city\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"City\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Relocation'>\n                                        {getFieldDecorator('relocation', {\n                                            rules: [{ required: true, message: 'Please select your relocation!' }],\n                                        })(\n                                            <RadioGroup onChange={this.onChange} value={this.state.value}>\n                                                <Radio value={1}>YES</Radio>\n                                                <Radio value={2}>NO</Radio>\n                                            </RadioGroup>)}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Postal-Code'>\n                                        {getFieldDecorator('Postal-Code', {\n                                            rules: [{ required: true, message: 'Please enter your Postal Code!' }],\n                                        })(\n                                            <Input\n                                                name=\"postal-code\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"postal-code\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Job-Title'>\n                                        {getFieldDecorator('Job-Title', {\n                                            rules: [{ required: true, message: 'Please enter your Job-Title!' }],\n                                        })(\n                                            <Input\n                                                name=\"Job-title\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Job-title\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Skills'>\n                                        {getFieldDecorator('Skills', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"skills\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"skills\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                            </Col>\n\n\n                        </Row>\n\n                    </Form>\n                </div >\n            </div >\n        );\n    }\n}\n\n\nconst wrappedAddEmployee = Form.create()(AddEmployee)\nexport default wrappedAddEmployee;\n","import React, { Component } from 'react';\nimport EmployeeData from '../../api/api';\nimport { searchedEmployeeAction, allEmployees } from '../../actions/employeeActions';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport './addEmployee.css';\nimport { Table } from 'antd';\n// import employeeSearch from '../../reducers/employeeSearch';\n\n\nclass SearchEmployee extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    }\n    // this.handleUserData = this.handleUserdata.bind(this)\n    this.handleSubmitMessage = this.handleSubmitMessage.bind(this)\n    this.handleMessageInput = this.handleMessageInput.bind(this)\n  }\n  componentDidMount() {\n    this.props.dispatch(allEmployees())\n  }\n\n  handleSubmitMessage(e) {\n    e.preventDefault();\n    const data = this.state.value;\n    // console.log(data);\n    // this.props.dispatch(searchedEmployeeAction(data))\n\n  }\n\n  handleMessageInput(e) {\n    this.setState({\n      value: e.target.value\n    });\n    this.props.dispatch(searchedEmployeeAction(e.target.value))\n\n  }\n\n  empdata = () => {\n    if (this.props.searchedEmployee.length != 0) {\n      return this.props.searchedEmployee;\n    }\n    else {\n      return this.props.employees;\n    }\n  }\n\n  render() {\n    // const empdata = []\n    // this.props.employees;\n    const columns = [{\n      title: 'first name',\n      dataIndex: 'firstName',\n      // key: '10',\n    }, {\n      title: 'lastName',\n      dataIndex: 'lastName',\n      // key: '2',\n    }, {\n      title: 'homePhone',\n      dataIndex: 'homePhone',\n      // key: 'homePhone',\n    }];\n    // console.log(this.props);\n    return (\n      <div>\n        <div className=\"input-form\">\n          <Form onSubmit={this.handleSubmitMessage}>\n            <Input\n              type=\"text\"\n              placeholder=\"search employee here\"\n              value={this.state.value}\n              onChange={this.handleMessageInput}\n            />\n            <Button>search</Button>\n\n          </Form>\n        </div>\n        <div>\n          {/* <p> {this.props.searchedEmployee} </p> */}\n          <div>\n            <Table columns={columns} dataSource={this.empdata()} size=\"middle\" />\n            {/* <h4>Small size table</h4>\n                 <Table columns={columns} dataSource={data} size=\"small\" /> */}\n          </div>\n\n        </div>\n      </div>\n\n    );\n  }\n}\nSearchEmployee.propTypes = {\n  // Define your PropTypes here\n};\nconst mapStateToProps = (state) => {\n  // console.log('hello ' + JSON.stringify(state))\n  // const jsondata = Object.keys(state.employee.employees).map(function(key) {\n  //   return [state.employee.employees[key]];\n  // })\n  return {\n    searchedEmployee: state.employee.employee,\n    employees: state.employee.employees\n  }\n}\n\n\n\nexport default connect(mapStateToProps)(SearchEmployee);\n","import * as types from '../constants/actionTypes';\n\nexport const searchedEmployeeAction = (value) => ({\n    type: types.SEARCHED_EMPLOYEE,\n    value\n})\nexport const allEmployees = () => ({\n    type: types.ALL_EMPLOYEES\n})","import React, { Component } from 'react';\nimport './dashBoard.css';\n// import ContentData from '../content/index.js';\nimport AddEmployee from '../employeeData/addEmployee';\nimport SearchEmployee from '../employeeData/searchEmployee';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport { NavLink, Link } from \"react-router-dom\";\n\n\nconst { Header, Content, Footer, Sider, Row, Col } = Layout;\nconst SubMenu = Menu.SubMenu;\n\nclass DashBoard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAddEmp: false,\n      isSearchEmp: false\n    };\n  }\n\n  onButtonClicked = (isAdd) => {\n    if (isAdd === \"add\") {\n      this.setState({ isAddEmp: true, isSearchEmp: false });\n    } else {\n      this.setState({ isSearchEmp: true, isAddEmp: false });\n    }\n  }\n  // state = {\n  //   collapsed: false,\n  // };\n\n  // toggle = () => {\n  //   this.setState({\n  //     collapsed: !this.state.collapsed,\n  //   });\n  // }\n\n  render() {\n\n    const { isAddEmp, isSearchEmp } = this.state;\n\n\n    return (\n      // <div>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider\n        // collapsible\n        // collapsed={this.state.collapsed}\n        // onCollapse={this.onCollapse}\n        >\n          <div className=\"logo\" />\n          <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n            <img src=\"https://rsrit.com/wp-content/uploads/2017/12/logo_dark.png\" alt=\"image\" width=\"200px\" height=\"70px\"></img>\n\n            <SubMenu\n              key=\"sub1\"\n              title={<span><Icon type=\"user\" /><span>Perosnal Details</span></span>}\n            >\n              <Menu.Item key=\"1\" onClick={() => this.onButtonClicked(\"add\")} >Add Applicant</Menu.Item>\n              <Menu.Item key=\"2\" onClick={() => this.onButtonClicked(\"\")}>Search Applicant</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"3\">\n              <Icon type=\"desktop\" />\n              <span>Documents</span>\n            </Menu.Item>\n            <SubMenu\n              key=\"sub2\"\n              title={<span><Icon type=\"user\" /><span>Education Details</span></span>}\n            >\n              <Menu.Item key=\"4\">Tom</Menu.Item>\n              <Menu.Item key=\"5\">Bill</Menu.Item>\n              <Menu.Item key=\"6\">Alex</Menu.Item>\n            </SubMenu>\n            <SubMenu\n              key=\"sub3\"\n              title={<span><Icon type=\"team\" /><span>Certifications</span></span>}\n            >\n              <Menu.Item key=\"7\">Team 1</Menu.Item>\n              <Menu.Item key=\"8\">Team 2</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"9\">\n              <Icon type=\"file\" />\n              <span>Language</span>\n            </Menu.Item>\n            <Menu.Item key=\"10\">\n              <Icon type=\"file\" />\n              <span>Work Experience</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }} />\n          <Content style={{ margin: '24px 16px', padding: 24, background: '#fff', minHeight: 580 }}>\n            {/* <Link to={{ pathname: \"/AddEmployee\" }}>Add Employee</Link>\n            {\"|\"}\n            <Link to={{ pathname: \"/SearchEmployee\" }}>Search Employee</Link> */}\n            {(isAddEmp ? (<AddEmployee {...this.props} />) : (\"\"))}\n            {(isSearchEmp ? (<SearchEmployee  {...this.props} />) : (\"\"))}\n\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            {/* Ant Design ©2018 Created by Ant UED */}\n          </Footer>\n        </Layout>\n      </Layout>\n\n      // {/* </div> */}\n\n    );\n  }\n}\n\n\n\nexport default DashBoard;\n","import React from \"react\";\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\n// import Login from \"../components/Login\";\n// import Home from \"../components/Home\";\n// import CreateNewRequest from \"../components/CreateNewRequest\";\n// import React from \"react\";\n// import { Route, IndexRoute} from 'react-router';\n\n// import {  Switch, Redirect, BrowserRouter } from \"react-router-dom\";\n//import Login from \"../components/login/login\";\nimport DashBoard from \"./components/dash-board/dashBoard\";\n// import contentData from '../components/content/index';\nimport AddEmployee from './components/employeeData/addEmployee';\nimport SearchEmployee from './components/employeeData/searchEmployee';\n// import HomePage from './components/HomePage';\n// import CreateNewRequest from \"../components/CreateNewRequest\";\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\n\n\n// Map components to different routes.\n// The parent component wraps other components and thus serves as  the entrance to \n// other React components.\n// IndexRoute maps HomePage component to the default route\nconst store = configureStore();\n\nexport default () => {\n    return (\n        // <Provider store={store}>\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/DashBoard\" render={props => <DashBoard {...props} />} />\n                {/* <Route exact path=\"/home\" render={props => <Home {...props} />} /> */}\n                <Route exact path=\"/AddEmployee\" render={props => <AddEmployee {...props} />} />\n                <Route exact path=\"/SearchEmployee\" render={props => <SearchEmployee {...props} />} />\n\n                <Redirect to=\"/dashboard\" />\n            </Switch>\n        </BrowserRouter>\n        //   </Provider>\n    )\n};\n\n// export default (\n    // <Route path =\"/\" component ={App}>\n    //     {/* <IndexRoute component ={DashBoard} /> */}\n    //     <Route path = 'AddEmployee' component = {AddEmployee} />\n    //     <Route path = 'SearchEmployee' component = {SearchEmployee} />\n    // </Route>\n\n//     <Route path =\"/\" component ={App}>\n//         <Route path = 'SearchEmployee' component = {SearchEmployee} />\n//         <Route path = 'AddEmployee' component = {AddEmployee} />\n//     </Route>\n// );\n\n// export default () => {\n//   return (\n\n\n//     <BrowserRouter>\n//       <Switch>\n//         {/* <Route exact path=\"/login\" render={props => <Login {...props} />} /> */}\n//         <IndexRoute path=\"/dashBoard\" component = {DashBoard} />\n//         {/* <Route exact path=\"/createNewRequest\" render={props => <CreateNewRequest {...props} />} /> */}\n//         <Route path = 'AddEmployee' component = {AddEmployee} />\n//         <Route path = 'SearchEmployee' component = {SearchEmployee} />\n//         <Redirect to=\"/dashBoard\" />\n//       </Switch>\n//     </BrowserRouter>\n//   );\n// };","import React, { Component } from 'react';\nimport {IndexLink, Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport AddEmployee from '../components/employeeData/addEmployee';\nimport DashBoard from '../components/dash-board/dashBoard';\nimport Routes from '../routes';\nimport configureStore from '../store/configureStore';\n// import logo from './logo.svg';\nimport './App.css';\n// import Header from '../components/Header';\nimport { Provider } from 'react-redux';  \n\n// import logo from './logo.svg';\n// import './App.css';\nconst store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n            {/* <Provider store={store}> */}\n\n                <Routes />\n\n\n          {/* </Provider> */}\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport configureStore from './store/configureStore';\nimport App from './containers/App';\n// import routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\nReactDOM.render(\n    <BrowserRouter>\n    <Provider store={store}>\n        < App />\n    </Provider>\n    </BrowserRouter>\n    , \n    document.getElementById('root'));\n    \n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}