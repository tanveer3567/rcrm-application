{"version":3,"sources":["reducers/initialState.js","constants/actionTypes.js","reducers/index.js","reducers/employeeSearch.js","api/api.js","sagas/EmployeeSaga.js","sagas/watcher.js","sagas/index.js","store/configureStore.js","components/employeeData/addEmployee.js","components/employeeData/searchEmployee.js","actions/employeeActions.js","components/employeeData/documents.js","components/employeeData/educationDetails.js","components/dash-board/dashBoard.js","routes.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialState","employee","employees","ALL_EMPLOYEES","rootReducer","combineReducers","state","arguments","length","undefined","action","type","newState","Object","objectSpread","value","result","val","firstName","match","push","assign","handleSearchedEmployee","types","handleAllEmployeeList","baseUrl","Employees","Promise","resolve","reject","fetch","concat","then","res","json","allEmployeesSaga","regenerator_default","a","wrap","_context","prev","next","call","sent","put","t0","error","stop","_marked","this","watchAllEmployee","takeLatest","watcher_marked","startEmployeeSearch","fork","sagas_marked","configureStore","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","runSaga","run","rootSaga","Option","Select","RadioGroup","Radio","Group","FormItem","Form","Item","residences","label","AddEmployee","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","onChange","e","console","log","target","setState","primarySkills","handleMessageInput","bind","assertThisInitialized","handleSubmitMessage","defineProperty","name","preventDefault","form","validateFieldsAndScroll","err","values","JSON","stringify","request","post","send","set","end","children","arr","i","react_default","createElement","key","toString","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","prefixSelector","initialValue","es_select","style","width","es_form","row","gutter","col","className","src","default","height","rules","required","message","input","placeholder","lastName","homePhone","textAlign","addonBefore","workPhone","dob","es_radio","cascader","options","mode","defaultValue","float","es_button","onClick","Component","wrappedAddEmployee","create","SearchEmployee","empdata","searchedEmployee","dispatch","onSubmit","table","columns","title","dataIndex","dataSource","size","connect","Demo","handleSubmit","validateFields","normFile","Array","isArray","fileList","extra","valuePropName","getValueFromEvent","upload","listType","icon","documents_RadioGroup","offset","htmlType","WrappedDemo","EdDetails","handleSearch","handleReset","resetFields","toggle","expand","changeList","count","universityList","toConsumableArray","university","deleteList","array","splice","paddingBottom","card","getFields","marginLeft","fields","_this2","map","index","marginTop","WrappedEdDetails","Header","Layout","Content","Footer","Sider","SubMenu","Row","Col","Menu","DashBoard","onButtonClicked","comp","isAddEmp","isSearchEmp","isdoc","isEdDetails","_this$state","layout","minHeight","menu","defaultSelectedKeys","alt","background","padding","margin","employeeData_addEmployee","searchEmployee","documents","educationDetails","routes","BrowserRouter","Switch","Route","exact","path","render","dash_board_dashBoard","Redirect","to","App","Boolean","window","location","hostname","store","ReactDOM","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20d122c9.chunk.js","sourcesContent":["export default {\n    employee: [],\n    employees: []\n\n}","export const EMPLOYEE_LOAD_SUCCESS = 'EMPLOYEE_LOAD_SUCCESS';\nexport const SEARCHED_EMPLOYEE = 'SEARCHED_EMPLOYEE';\nexport const SEARCH_MEDIA_ERROR = 'SEARCH_MEDIA_ERROR';\nexport const ALL_EMPLOYEES = 'ALL_EMPLOYEES';\nexport const POST_DATA = 'POST_DATA';","import employee from './employeeSearch';\nimport {combineReducers} from 'redux';\nconst rootReducer = combineReducers({\n    employee\n})\n\nexport default rootReducer;\n\n// import initialState from './initialState';\n// import * as types from '../constants/actionTypes';\n\n// const reducer = (state, action) => {\n//     // console.log('im reducer')\n//     switch(action.type){\n//         // case types.EMPLOYEE_LOAD_SUCCESS:\n//         // return  Object.assign({}, state, action.videos)\n//         case types.SEARCHED_EMPLOYEE:\n//             let newState = {...state};\n//             if(action.employee !== undefined){\n//             newState = Object.assign({}, state, {employee : Object.assign({}, action.employee)})\n//             } \n//             return {...newState};\n//             // else`{ \n//                 // return 'bull shit'\n//             // }\n//         // return [...state, action];\n//         default:\n//         return state;\n//     }\n// }\n// export default reducer;","import initialState from './initialState';\nimport * as types from '../constants/actionTypes';\n\n\nconst handleAllEmployeeList = (state, action) => {\n    let newState = { ...state };\n    if (action.employees !== undefined) {\n        newState = Object.assign({}, state, { employees: action.employees })\n    }\n    // console.log(newState)\n    return { ...newState };\n\n}\n\nconst handleSearchedEmployee = (state, action) => {\n    // console.log('im reducer')\n    let newState = { ...state };\n    if (action.value !== undefined) {\n        let result = [];\n        for (let val in state.employees) {\n            if (state.employees[val].firstName.match(action.value)) {\n                result.push(state.employees[val])\n            }\n        }\n        newState = Object.assign({}, state, { employee: result })\n    }\n    return { ...newState };\n\n}\n\n\nexport default (state = initialState, action) => {\n    // console.log('im reducer')\n    switch (action.type) {\n        // case types.EMPLOYEE_LOAD_SUCCESS:\n        // return  Object.assign({}, state, action.videos)\n        case types.SEARCHED_EMPLOYEE:\n\n            // let newState = {...state};\n            // if(action.employee !== undefined){\n            // newState = Object.assign({}, state,{employee : action.employee})\n            // // newState = Object.assign({}, state, action.employee)\n            // }\n            // return {...newState};\n            return handleSearchedEmployee(state, action);\n        case types.ALL_EMPLOYEES:\n            return handleAllEmployeeList(state, action);\n\n        default:\n            return state;\n    }\n}","// import { resolve } from \"url\";\n// const baseUrl = 'http://localhost:3010';\nconst baseUrl = 'https://swag-api.herokuapp.com';\nlet that = this;\nexport const EmployeeData = (searchQuery) =>{\n        //1\n        \n        var promise = new Promise((resolve,reject) => {\n//        2\n            fetch(`${baseUrl}/product?firstName=${searchQuery}`)\n            .then(res => {\n                //then is chained to whatever fetch is returning\n                    // 4\n                    // console.log(res.json())\n\n                resolve (res.json());\n             //json takes the response and converts to json \n            })\n        // });\n//        3\n    })\n    // console.log(promise)\n    return promise;\n}\n\n\n\nexport const Employees = () =>{\n    //1\n    var promise = new Promise((resolve,reject) => {\n//        2\n        fetch(`${baseUrl}/products`)\n        .then(res => {\n            //then is chained to whatever fetch is returning\n                // 4\n                // console.log(res.json())\n\n            resolve (res.json());\n         //json takes the response and converts to json \n        })\n    // });\n//        3\n})\n// console.log(promise)\nreturn promise;\n}\n\n\n// export default EmployeeData;//ES6 format of module.export\n","import { all, put, call } from 'redux-saga/effects';\nimport { EmployeeData, Employees } from '../api/api';\nimport * as types from '../constants/actionTypes';\n\n// export function* searchEmployeeSaga({value}){\n// export function* searchEmployeeSaga(value) {\n\n//     try {\n//         yield put({ type: types.SEARCHED_EMPLOYEE, value })\n\n//     } catch (error) {\n//         yield put({ type: 'SEARCH_EMPLOYEE_ERROR', error });\n//     }\n// }\n\nexport function* allEmployeesSaga() {\n    try {\n        // console.log(payload+'here I am ');\n        const employees = yield call(Employees);\n        // const employee = yield call(EmployeeData, value);\n\n        // console.log(employees);\n        yield put({ type: types.ALL_EMPLOYEES, employees: employees });\n\n\n    } catch (error) {\n        yield put({ type: 'SEARCH_EMPLOYEE_ERROR', error });\n    }\n\n}","import { takeLatest } from 'redux-saga/effects';\nimport { searchEmployeeSaga, allEmployeesSaga } from './EmployeeSaga';\nimport * as types from '../constants/actionTypes';\n\n\n\nexport default function* watchAllEmployee() {\n    yield takeLatest(types.ALL_EMPLOYEES, allEmployeesSaga)\n}\n\n// export function* watchSearchEmployee() {\n//     yield takeLatest(types.SEARCHED_EMPLOYEE, searchEmployeeSaga);\n// }\n\n","import { fork } from 'redux-saga/effects';\nimport watchAllEmployee from './watcher';\n\nexport default function* startEmployeeSearch() {\n    yield fork(watchAllEmployee);\n    // yield fork(watchSearchEmployee);\n\n}\n\n\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    return {\n        ...createStore(reducer, applyMiddleware(sagaMiddleware)),\n        runSaga: sagaMiddleware.run(rootSaga)\n    };\n};\nexport default configureStore;\n// redux saga is a library that aims to make side effects in react-redux applications easier and better","\nimport React, { Component } from 'react';\n// import { request } from 'http';\nimport request from 'superagent';\nimport { Radio, Form, Input, Row, Col, Button, Select, Cascader } from 'antd';\nimport './addEmployee.css';\n// import { Layout, Menu, Icon } from 'antd';\n// import './index.css'; \n// const { Header, Sider, Content, Footer } = Layout;\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\nconst FormItem = Form.Item;\nconst residences = [{\n    value: 'India',\n    label: 'India',\n}, {\n    value: 'United States',\n    label: 'United States',\n}];\n\nclass AddEmployee extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n            primarySkills: []\n        }\n        this.handleMessageInput = this.handleMessageInput.bind(this);\n        this.handleSubmitMessage = this.handleSubmitMessage.bind(this);\n    }\n    onChange = (e) => {\n        console.log('radio checked', e.target.value);\n        this.setState({\n            value: e.target.value,\n        });\n    }\n    handleMessageInput(e) {\n\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n        // console.log(\"xyz\"+this.state.firstName)\n    }\n    handleSubmitMessage(e) {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                console.log(\"values\" + JSON.stringify(values));\n                request.post('https://swag-api.herokuapp.com/product')\n                    .send(values)\n                    .set('Accept', 'application/json')\n                    .end((err, res) => {\n                        if (err) {\n                            console.log('no error');\n                        } else {\n                            console.log('success');\n                        }\n                    });\n            }\n        });\n    }\n    primarySkills = (value) => {\n        this.setState({\n            primarySkills: value\n        })\n    }\n    render() {\n\n        const children = [];\n        const arr = ['java', 'python', 'javascript', 'Node.js', 'SQL', 'mongoDB', 'HTLM5']\n        for (let i = 0; i < arr.length; i++) {\n            children.push(<Option key={(i + 10).toString(36) + i}>{arr[i]}</Option>);\n        }\n        console.log(children)\n\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '1',\n        })(\n            <Select style={{ width: 70 }}>\n                <Option value=\"1\">+1</Option>\n                <Option value=\"91\">+91</Option>\n            </Select>\n        );\n        return (\n            <div>\n                <div >\n                    <Form >\n                        <h1>Add Applicant</h1>\n\n                        <Row gutter={80}>\n\n                            <Col span={4}>\n                                <div className=\"picture\">\n                                    <img src='http://icons.iconarchive.com/icons/paomedia/small-n-flat/512/user-male-icon.png' default='image' height='200px' width='200px'></img>\n                                </div>\n                            </Col>\n                            <Col span={10} >\n                                <Row >\n                                    <FormItem {...formItemLayout} label='First-Name'>\n                                        {getFieldDecorator('firstName', {\n                                            rules: [{ required: true, message: 'Please input your username!' }],\n                                        })(\n                                            <Input\n                                                name=\"firstName\"\n                                                type=\"text\"\n                                                value={this.state.firstName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"first name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row >\n                                    <FormItem {...formItemLayout} label='Last-Name'>\n                                        {getFieldDecorator('lastName', {\n                                            rules: [{ required: true, message: 'Please input your lastName!' }],\n                                        })(\n                                            <Input\n                                                name=\"lastName\"\n                                                type=\"value\"\n                                                value={this.state.lastName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"last name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label=\"email\">\n                                        {getFieldDecorator('email', {\n                                            rules: [{\n                                                type: 'email', message: 'The input is not valid E-mail!',\n                                            }, {\n                                                required: true, message: 'Please input your E-mail!',\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"emailAddress\"\n                                                type=\"value\"\n                                                value={this.state.homePhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Email Address\"\n                                                style={{ textAlign: 'center' }}\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Work-Phone'>\n                                        {getFieldDecorator('workphone', {\n                                            rules: [{ required: true, message: 'Please input your number!' }],\n                                        })(\n                                            <Input\n                                                type=\"number\" addonBefore={prefixSelector} style={{ width: '100%' }} placeholder=\"work-phone\"\n                                                name=\"workPhone\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='SSN'>\n                                        {getFieldDecorator('SSN', {\n                                            rules: [{ required: true, message: 'Please input your SSN number!' }],\n                                        })(\n                                            <Input\n                                                name=\"SSN\"\n                                                type=\"number\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"xx-xxx-xxxx\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Skype-ID'>\n                                        {getFieldDecorator('skype-ID', {\n                                            rules: [{ required: true, message: 'Please input your skype-ID!' }],\n                                        })(\n                                            <Input\n                                                name=\"skypeID\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"skype-ID\"\n                                            />)}\n                                    </FormItem>\n\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='facebook-ID'>\n                                        {getFieldDecorator('facebook', {\n                                            rules: [{ required: true, message: 'Please input your facebook ID!' }],\n                                        })(\n                                            <Input\n                                                name=\"facebook\"\n                                                type=\"value\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Facebook profile URL\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Address'>\n                                        {getFieldDecorator('address', {\n                                            rules: [{ required: true, message: 'Please input your address!' }],\n                                        })(\n                                            <Input\n                                                name=\"address\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Apt or unit no.\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Clearance'>\n                                        {getFieldDecorator('Clearance', {\n                                            rules: [{ required: true, message: 'Please select your clearance!' }],\n                                        })(\n                                            <RadioGroup onChange={this.onChange} value={this.state.value}>\n                                                <Radio value={1}>YES</Radio>\n                                                <Radio value={2}>NO</Radio>\n                                            </RadioGroup>)}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label=\" Residence\">\n                                        {getFieldDecorator('residence', {\n                                            initialValue: ['United States'],\n                                            rules: [{ type: 'array', required: true, message: 'Please select your country of residence!' }],\n                                        })(\n                                            <Cascader options={residences} />\n                                        )}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='State'>\n                                        {getFieldDecorator('State', {\n                                            rules: [{ required: true, message: 'Please input your State!' }],\n                                        })(\n                                            <Input\n                                                name=\"State\"\n                                                type=\"value\"\n                                                // value={this.state.dob}\n                                                // onChange={this.handleMessageInput}\n                                                placeholder=\"State\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Technology'>\n                                        {getFieldDecorator('Technology', {\n                                            rules: [{ required: true, message: 'Please input your Technology!' }],\n                                        })(\n                                            <Input\n                                                name=\"technology\"\n                                                type=\"value\"\n                                                // value={this.state.dob}\n                                                // onChange={this.handleMessageInput}\n                                                placeholder=\"Technology\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Primary-skills'>\n                                        {getFieldDecorator('Primary-skills', {\n                                            rules: [{ required: true, message: 'Please input your Primary skills!' }],\n                                        })(\n                                            <Select\n                                                mode=\"multiple\"\n                                                style={{ width: '100%' }}\n                                                defaultValue={['java']}\n                                            >\n                                                {children}\n                                            </Select>\n                                            // <Input\n                                            //     name=\"primary-skills\"\n                                            //     type=\"value\"\n                                            //     value={this.state.dob}\n                                            //     onChange={this.handleMessageInput}\n                                            //     placeholder=\"Primary-skills\"\n                                            // />\n                                        )}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem style={{ float: 'right', width: '66.5%' }}>\n                                        {/* {getFieldDecorator('submit', { */}\n                                        {/* rules: [{ required: true, message: 'Please input your skills!' }], */}\n                                        {/* })( */}\n                                        <Button type='Submit' onClick={this.handleSubmitMessage}>Submit</Button>\n                                        {/* )} */}\n                                    </FormItem>\n                                </Row>\n                            </Col>\n                            <Col span={10}>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Middle-Name'>\n                                        {getFieldDecorator('middleName', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"middleName\"\n                                                type=\"text\"\n                                                value={this.state.firstName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"middle name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Nick-Name'>\n                                        {getFieldDecorator('Nick-Name', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"nickname\"\n                                                type=\"value\"\n                                                value={this.state.lastName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"nick name\"\n                                            />\n                                        )}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Date-Of-Birth'>\n                                        {getFieldDecorator('DOB', {\n                                            rules: [{ required: true, message: 'please input your date of birth' }],\n                                        })(\n                                            <Input\n                                                name=\"dob\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"MM-DD-YYYY\"\n                                            />\n                                        )}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Home-Phone'>\n                                        {getFieldDecorator('homePhone', {\n                                            rules: [{\n                                                required: false,\n                                                // message: 'Please input your home-phone number!' \n                                            }],\n                                        })(\n                                            <Input type='number' addonBefore={prefixSelector} style={{ width: '100%' }} placeholder=\"home-phone\" />\n                                        )}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Linked-In'>\n                                        {getFieldDecorator('Linked-In', {\n                                            rules: [{\n                                                required: false,\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"linkedIn\"\n                                                type=\"value\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"linkedIn profile URL\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Twitter'>\n                                        {getFieldDecorator('twitter', {\n                                            rules: [{\n                                                required: false,\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"twitter\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Twitter Profile URL\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Work-Authorization'>\n                                        {getFieldDecorator('work-authorization', {\n                                            rules: [{\n                                                required: true, message: 'please input your work authorization'\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"work Authorization\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Work-Authorization\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='City'>\n                                        {getFieldDecorator('City', {\n                                            rules: [{\n                                                required: true, message: 'please input your City'\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"city\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"City\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Relocation'>\n                                        {getFieldDecorator('relocation', {\n                                            rules: [{ required: true, message: 'Please select your relocation!' }],\n                                        })(\n                                            <RadioGroup onChange={this.onChange} value={this.state.value}>\n                                                <Radio value={1}>YES</Radio>\n                                                <Radio value={2}>NO</Radio>\n                                            </RadioGroup>)}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Postal-Code'>\n                                        {getFieldDecorator('Postal-Code', {\n                                            rules: [{ required: true, message: 'Please enter your Postal Code!' }],\n                                        })(\n                                            <Input\n                                                name=\"postal-code\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"postal-code\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Job-Title'>\n                                        {getFieldDecorator('Job-Title', {\n                                            rules: [{ required: true, message: 'Please enter your Job-Title!' }],\n                                        })(\n                                            <Input\n                                                name=\"Job-title\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Job-title\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Skills'>\n                                        {getFieldDecorator('Skills', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"skills\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"skills\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                            </Col>\n\n\n                        </Row>\n\n                    </Form>\n                </div >\n            </div >\n        );\n    }\n}\n\n\nconst wrappedAddEmployee = Form.create()(AddEmployee)\nexport default wrappedAddEmployee;\n","import React, { Component } from 'react';\nimport EmployeeData from '../../api/api';\nimport { searchedEmployeeAction, allEmployees } from '../../actions/employeeActions';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport './addEmployee.css';\nimport { Table } from 'antd';\n// import employeeSearch from '../../reducers/employeeSearch';\n\n\nclass SearchEmployee extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    }\n    // this.handleUserData = this.handleUserdata.bind(this)\n    this.handleSubmitMessage = this.handleSubmitMessage.bind(this)\n    this.handleMessageInput = this.handleMessageInput.bind(this)\n  }\n  componentDidMount() {\n    this.props.dispatch(allEmployees())\n  }\n\n  handleSubmitMessage(e) {\n    e.preventDefault();\n    const data = this.state.value;\n    // console.log(data);\n    // this.props.dispatch(searchedEmployeeAction(data))\n\n  }\n\n  handleMessageInput(e) {\n    this.setState({\n      value: e.target.value\n    });\n    this.props.dispatch(searchedEmployeeAction(e.target.value))\n\n  }\n\n  empdata = () => {\n    if (this.props.searchedEmployee.length != 0) {\n      return this.props.searchedEmployee;\n    }\n    else {\n      return this.props.employees;\n    }\n  }\n\n  render() {\n    // const empdata = []\n    // this.props.employees;\n    const columns = [{\n      title: 'first name',\n      dataIndex: 'firstName',\n      // key: '10',\n    }, {\n      title: 'lastName',\n      dataIndex: 'lastName',\n      // key: '2',\n    }, {\n      title: 'homePhone',\n      dataIndex: 'homePhone',\n      // key: 'homePhone',\n    }];\n    // console.log(this.props);\n    return (\n      <div>\n        <div className=\"input-form\">\n          <Form onSubmit={this.handleSubmitMessage}>\n            <Input\n              type=\"text\"\n              placeholder=\"search employee here\"\n              value={this.state.value}\n              onChange={this.handleMessageInput}\n            />\n            <br />\n            <br />\n            <Button>search</Button>\n\n          </Form>\n        </div>\n        <div>\n          {/* <p> {this.props.searchedEmployee} </p> */}\n          <div>\n            <Table columns={columns} dataSource={this.empdata()} size=\"middle\" />\n            {/* <h4>Small size table</h4>\n                 <Table columns={columns} dataSource={data} size=\"small\" /> */}\n          </div>\n\n        </div>\n      </div>\n\n    );\n  }\n}\nSearchEmployee.propTypes = {\n  // Define your PropTypes here\n};\nconst mapStateToProps = (state) => {\n  // console.log('hello ' + JSON.stringify(state))\n  // const jsondata = Object.keys(state.employee.employees).map(function(key) {\n  //   return [state.employee.employees[key]];\n  // })\n  return {\n    searchedEmployee: state.employee.employee,\n    employees: state.employee.employees\n  }\n}\n\n\n\nexport default connect(mapStateToProps)(SearchEmployee);\n","import * as types from '../constants/actionTypes';\n\nexport const searchedEmployeeAction = (value) => ({\n    type: types.SEARCHED_EMPLOYEE,\n    value\n})\nexport const allEmployees = () => ({\n    type: types.ALL_EMPLOYEES\n})\n\nexport const postEmployeedata = (data) => ({\n    type: types.POST_DATA,\n    data\n})","import React, { Component } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./addEmployee.css\";\nimport {\n    Form,\n    Select,\n    Button,\n    Upload,\n    Radio,\n    Icon,\n    Cascader,\n    Col,\n    Row,\n    Input\n\n} from \"antd\";\n\n// const { Option } = Select;\nconst RadioGroup = Radio.Group;\nconst residences = [{\n    value: 'resume',\n    label: 'resume',\n}, {\n    value: 'Cover Letter',\n    label: 'Cover Letter',\n}];\nclass Demo extends Component {\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log(\"Received values of form: \", values);\n            }\n        });\n    };\n\n    normFile = e => {\n        console.log(\"Upload event:\", e);\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e && e.fileList;\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: { span: 6 },\n            wrapperCol: { span: 14 }\n        };\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Row>\n                    <Col span={12}>\n                        <Row >\n                            <Form.Item {...formItemLayout} label='Title'>\n                                {getFieldDecorator('title', {\n                                    rules: [{ required: false }],\n                                })(\n                                    <Input\n                                        name=\"title\"\n                                        type=\"text\"\n                                        placeholder=\"document title\"\n                                    />\n                                )}\n                            </Form.Item>\n                        </Row>\n                        <Row>\n                            <Form.Item {...formItemLayout}\n                                label=\" Type\"\n                                className=\"resume\"\n                            >\n                                {getFieldDecorator('Type', {\n                                    initialValue: ['resume'],\n                                    rules: [{ type: 'array', required: false }],\n                                })(\n                                    <Cascader options={residences} />\n                                )}\n\n                            </Form.Item>\n                        </Row>\n                        <Row>\n                            <Form.Item\n                                {...formItemLayout}\n                                label=\"Attachment\"\n                                extra=\"Please upload your document\"\n                            >\n                                {getFieldDecorator(\"upload\", {\n                                    valuePropName: \"fileList\",\n                                    getValueFromEvent: this.normFile\n                                })(\n                                    <Upload\n                                        name=\"file\"\n                                        action=\"http://ec2-52-24-8-126.us-west-2.compute.amazonaws.com:8080/candidate/5c1aae39f37a6f35c4d84586/documents/save\"\n                                        listType=\"files\"\n                                    >\n                                        <Button>\n                                            <Icon type=\"upload\" /> Click to upload\n                                </Button>\n                                    </Upload>\n                                )}\n                            </Form.Item>\n                        </Row>\n                        <Row>\n                            <Form.Item {...formItemLayout} label='Resume Visibility'>\n                                {getFieldDecorator('Resume Visibility', {\n                                    rules: [{ required: false }],\n                                })(\n                                    <RadioGroup>\n                                        <Radio value={1}>YES</Radio>\n                                        <Radio value={2}>NO</Radio>\n                                    </RadioGroup>)}\n                            </Form.Item>\n                            <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Submit\n                        </Button>\n                            </Form.Item>\n                        </Row>\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n\nconst WrappedDemo = Form.create({ name: \"validate_other\" })(Demo);\n\nexport default WrappedDemo;","\nimport React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport {\n    Form, Row, Col, Input, Button, Icon, Card\n} from 'antd';\nclass EdDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expand: false,\n            universityList: [this.university()],\n            count: 0\n        };\n    }\n\n\n    // To generate mock Form.Item\n    getFields() {\n        // const count = this.state.expand ? 10 : 6;\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: { span: 6 },\n            wrapperCol: { span: 14 }\n        };\n        const children = [];\n        const fields = [['School/University', 'Name'], ['Degree', 'Bachelors/Masters'], ['Years Completed', 'years'], ['Major Study', 'Specialization'], ['Minor Study', 'field'], ['GPA', ''], ['Country', ''], ['State', ''], ['City', '']];\n        for (let i = 0; i < fields.length; i++) {\n            if (i === 0 || i === 1 || i === 2 || i === 3) {\n                children.push(\n                    <Col span={12} key={i}>\n                        <Form.Item {...formItemLayout} label={`${fields[i][0]}`}>\n                            {getFieldDecorator(`field-${i}`, {\n                                rules: [{\n                                    required: true,\n                                    message: 'Input something!',\n                                }],\n                            })(\n                                <Input placeholder={fields[i][1]} />\n                            )}\n                        </Form.Item>\n                    </Col>\n                );\n            }\n            else {\n                children.push(\n                    <Col span={12} key={i}>\n                        <Form.Item {...formItemLayout} label={`${fields[i][0]}`}>\n                            {getFieldDecorator(`field-${i}`, {\n                                rules: [{\n                                    required: false,\n                                    // message: 'Input something!',\n                                }],\n                            })(\n                                <Input placeholder={fields[i][1]} />\n                            )}\n                        </Form.Item>\n                    </Col>\n                );\n            }\n        }\n        return children;\n    }\n\n    handleSearch = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            console.log('Received values of form: ', values);\n        });\n    }\n    componentDidMount() {\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n    handleReset = () => {\n        this.props.form.resetFields();\n    }\n\n    toggle = () => {\n        const { expand } = this.state;\n        this.setState({ expand: !expand });\n    }\n    changeList = () => {\n        console.log(this.state.count)\n        this.setState({\n            count: this.state.count + 1,\n            universityList: [...this.state.universityList, this.university(this.state.count)],\n        })\n        console.log(this.state.count)\n        // val++;\n\n\n        // this.setState({ universityList: [this.state.universityList[0].splice(1)] })\n    }\n    deleteList = (e) => {\n        console.log(\"target value\", e.target.value)\n        let array = [...this.state.universityList]; // make a separate copy of the array\n        // let index = array.indexOf(e.target.value)\n        // if (index !== -1) {\n        array.splice(e.target.value);\n        this.setState({ universityList: array });\n        // }\n    }\n    university = (value) => {\n        // const { i } = this.state.i;\n        return (\n            <div style={{ paddingBottom: 40 }}>\n                <Card\n                    type=\"inner\"\n                    title=\"University / School\"\n                    extra={<Button value={value} onClick={(e) => this.deleteList(e)}>Delete</Button>}\n                >\n                    <Form\n                        className=\"ant-advanced-search-form\"\n                        onSubmit={this.handleSearch}\n                    >\n                        <Row gutter={24}>{this.getFields()}</Row>\n                        <Row>\n                            <Col span={24} style={{ textAlign: 'right' }}>\n                                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                                <Button style={{ marginLeft: 8 }} onClick={this.handleReset}>\n                                    Clear\n                            </Button>\n                                {/* <a style={{ marginLeft: 8, fontSize: 12 }} onClick={this.toggle}>\n                                Collapse <Icon type={this.state.expand ? 'up' : 'down'} />\n                            </a> */}\n                            </Col>\n                        </Row>\n                    </Form>\n                </Card>\n            </div>\n        )\n    }\n    render() {\n\n        return (\n            < div >\n                {this.university()}\n\n                <div>\n                    {this.state.universityList.map((university, index) => (\n                        <div key={index}>{university}</div>\n                    ))}\n                </div>\n                <Button value={this.state.count} style={{ marginTop: 8 }} onClick={e => this.changeList(e)}>\n                    <Icon type=\"plus\" />Add another school/University\n                </Button>\n            </div >\n        );\n    }\n}\n\nconst WrappedEdDetails = Form.create({ name: 'advanced_search' })(EdDetails);\n\n\nexport default WrappedEdDetails;\n","import React, { Component } from 'react';\nimport './dashBoard.css';\n// import ContentData from '../content/index.js';\nimport AddEmployee from '../employeeData/addEmployee';\nimport SearchEmployee from '../employeeData/searchEmployee';\nimport WrappedDemo from '../employeeData/documents';\nimport EdDetails from '../employeeData/educationDetails'\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport { NavLink, Link } from \"react-router-dom\";\n\n\nconst { Header, Content, Footer, Sider, Row, Col } = Layout;\nconst SubMenu = Menu.SubMenu;\n\nclass DashBoard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAddEmp: false,\n      isSearchEmp: false,\n      isdoc: false,\n      isEdDetails: false\n    };\n  }\n\n  onButtonClicked = (comp) => {\n    switch (comp) {\n      case \"add\":\n        this.setState({ isAddEmp: true, isSearchEmp: false, isdoc: false, isEdDetails: false });\n        break;\n      case \"search\":\n        this.setState({ isSearchEmp: true, isAddEmp: false, isdoc: false, isEdDetails: false });\n        break;\n      case \"doc\":\n        this.setState({ isdoc: true, isAddEmp: false, isSearchEmp: false, isEdDetails: false });\n        break;\n      case \"edDetails\":\n        this.setState({ isEdDetails: true, isdoc: false, isAddEmp: false, isSearchEmp: false })\n        break;\n      default:\n        this.setState({ isAddEmp: true, isSearchEmp: false });\n    }\n  }\n\n  render() {\n\n    const { isAddEmp, isSearchEmp, isdoc, isEdDetails } = this.state;\n\n\n    return (\n      // <div>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider\n        >\n          <div className=\"logo\" />\n          <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n            <img src=\"https://rsrit.com/wp-content/uploads/2017/12/logo_dark.png\" alt=\"image\" width=\"200px\" height=\"70px\"></img>\n\n            <SubMenu\n              key=\"sub1\"\n              title={<span><Icon type=\"user\" /><span>Personal Details</span></span>}\n            >\n              <Menu.Item key=\"1\" onClick={() => this.onButtonClicked(\"add\")} >Add Applicant</Menu.Item>\n              <Menu.Item key=\"2\" onClick={() => this.onButtonClicked(\"search\")}>Search Applicant</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"3\" onClick={() => this.onButtonClicked(\"doc\")}>\n              <Icon type=\"desktop\" />\n              <span>Documents</span>\n            </Menu.Item>\n            <Menu.Item key=\"4\" onClick={() => this.onButtonClicked(\"edDetails\")}>\n              <Icon type=\"book\" />\n              <span>Education</span>\n            </Menu.Item>\n            <Menu.Item key=\"5\">\n              <Icon type=\"book\" />\n              <span>Certifications</span>\n            </Menu.Item>\n            <Menu.Item key=\"6\">\n              <Icon type=\"file\" />\n              <span>Language</span>\n            </Menu.Item>\n            <Menu.Item key=\"7\">\n              <Icon type=\"file\" />\n              <span>Work Experience</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }} />\n          <Content style={{ margin: '24px 16px', padding: 24, background: '#fff', minHeight: 580 }}>\n            {/* <Link to={{ pathname: \"/AddEmployee\" }}>Add Employee</Link>\n            {\"|\"}\n            <Link to={{ pathname: \"/SearchEmployee\" }}>Search Employee</Link> */}\n            {(isAddEmp ? (<AddEmployee {...this.props} />) : (\"\"))}\n            {(isSearchEmp ? (<SearchEmployee  {...this.props} />) : (\"\"))}\n            {(isdoc ? (<WrappedDemo  {...this.props} />) : (\"\"))}\n            {(isEdDetails ? (<EdDetails {...this.props} />) : (\"\"))}\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            {/* Ant Design ©2018 Created by Ant UED */}\n          </Footer>\n        </Layout>\n      </Layout>\n\n      // {/* </div> */}\n\n    );\n  }\n}\n\n\n\nexport default DashBoard;\n","import React from \"react\";\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\n\nimport DashBoard from \"./components/dash-board/dashBoard\";\nimport AddEmployee from './components/employeeData/addEmployee';\nimport SearchEmployee from './components/employeeData/searchEmployee';\n\nexport default () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/DashBoard\" render={props => <DashBoard {...props} />} />\n                <Route exact path=\"/AddEmployee\" render={props => <AddEmployee {...props} />} />\n                <Route exact path=\"/SearchEmployee\" render={props => <SearchEmployee {...props} />} />\n\n                <Redirect to=\"/dashboard\" />\n            </Switch>\n        </BrowserRouter>\n    )\n};\n\n","import React, { Component } from 'react';\nimport { IndexLink, Link } from 'react-router';\nimport PropTypes from 'prop-types';\nimport AddEmployee from '../components/employeeData/addEmployee';\nimport DashBoard from '../components/dash-board/dashBoard';\nimport Routes from '../routes';\nimport configureStore from '../store/configureStore';\n// import logo from './logo.svg';\nimport './App.css';\n// import Header from '../components/Header';\nimport { Provider } from 'react-redux';\n\n// import logo from './logo.svg';\n// import './App.css';\nconst store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {/* <Provider store={store}> */}\n        <Routes />\n\n\n        {/* </Provider> */}\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport configureStore from './store/configureStore';\nimport App from './containers/App';\n// import routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}