{"version":3,"sources":["reducers/initialState.js","constants/actionTypes.js","reducers/index.js","reducers/employeeSearch.js","api/api.js","sagas/EmployeeSaga.js","sagas/watcher.js","sagas/index.js","store/configureStore.js","components/employeeData/addEmployee.js","actions/employeeActions.js","components/employeeData/searchEmployee.js","components/dash-board/dashBoard.js","routes.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialState","employee","employees","SEARCHED_EMPLOYEE","ALL_EMPLOYEES","rootReducer","combineReducers","state","arguments","length","undefined","action","type","types","newState","Object","objectSpread","assign","handleAllEmployeeList","baseUrl","EmployeeData","searchQuery","Promise","resolve","reject","fetch","concat","then","res","json","Employees","searchEmployeeSaga","_ref","payload","regenerator_default","a","wrap","_context","prev","next","call","sent","all","put","t0","error","stop","_marked","this","watchSearchEmployee","takeLatest","watcher_marked","startEmployeeSearch","fork","sagas_marked","configureStore","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","runSaga","run","rootSaga","Option","Select","RadioGroup","Radio","Group","FormItem","Form","Item","residences","value","label","AddEmployee","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","onChange","e","console","log","target","setState","handleMessageInput","bind","assertThisInitialized","handleSubmitMessage","defineProperty","name","preventDefault","form","validateFieldsAndScroll","err","values","JSON","stringify","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","prefixSelector","initialValue","react_default","createElement","es_select","style","width","es_form","row","gutter","col","className","src","default","height","rules","required","message","input","firstName","placeholder","lastName","homePhone","addonBefore","workPhone","dob","es_radio","cascader","options","float","es_button","onClick","Component","wrappedAddEmployee","create","searchedEmployeeAction","SearchEmployee","dispatch","data","empdata","onSubmit","searchedEmployee","table","columns","title","dataIndex","dataSource","size","connect","Header","Layout","Content","Footer","Sider","SubMenu","Row","Col","Menu","DashBoard","onButtonClicked","isAdd","isAddEmp","isSearchEmp","_this2","_this$state","layout","minHeight","menu","defaultSelectedKeys","mode","alt","key","icon","background","padding","margin","employeeData_addEmployee","searchEmployee","textAlign","routes","BrowserRouter","Switch","Route","exact","path","render","dash_board_dashBoard","Redirect","to","App","Boolean","window","location","hostname","match","store","ReactDOM","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dd5fec0.chunk.js","sourcesContent":["export default {\n    employee: {},\n    employees:[]\n\n}","export const EMPLOYEE_LOAD_SUCCESS= 'EMPLOYEE_LOAD_SUCCESS';\nexport const SEARCHED_EMPLOYEE= 'SEARCHED_EMPLOYEE';\nexport const SEARCH_MEDIA_ERROR = 'SEARCH_MEDIA_ERROR';\nexport const ALL_EMPLOYEES = 'ALL_EMPLOYEES';","import employee from './employeeSearch';\nimport {combineReducers} from 'redux';\nconst rootReducer = combineReducers({\n    employee\n})\n\nexport default rootReducer;\n\n// import initialState from './initialState';\n// import * as types from '../constants/actionTypes';\n\n// const reducer = (state, action) => {\n//     // console.log('im reducer')\n//     switch(action.type){\n//         // case types.EMPLOYEE_LOAD_SUCCESS:\n//         // return  Object.assign({}, state, action.videos)\n//         case types.SEARCHED_EMPLOYEE:\n//             let newState = {...state};\n//             if(action.employee !== undefined){\n//             newState = Object.assign({}, state, {employee : Object.assign({}, action.employee)})\n//             } \n//             return {...newState};\n//             // else`{ \n//                 // return 'bull shit'\n//             // }\n//         // return [...state, action];\n//         default:\n//         return state;\n//     }\n// }\n// export default reducer;","// import initialState from './initialState';\n// import * as types from '../constants/actionTypes';\n\n// export default function (state = initialState.employees, action){\n//     switch(action.type){\n//         // case types.EMPLOYEE_LOAD_SUCCESS:\n//         // return  Object.assign({}, state, action.videos)\n//         case types.SEARCHED_EMPLOYEE:\n//         return {...state, searchedEmployee: action.employee._id};\n//         default:\n//         return state;\n//     }\n// }\n\n\nimport initialState from './initialState';\nimport * as types from '../constants/actionTypes';\n\n\nconst handleAllEmployeeList = (state, action) =>{\n    let newState = {...state};\n    if(action.employees !=undefined){\n        newState = Object.assign({},state,{employees: action.employees})\n    }\n    return {...newState};\n\n}\n\n\nexport default (state=initialState, action) => {\n    // console.log('im reducer')\n    switch(action.type){\n        // case types.EMPLOYEE_LOAD_SUCCESS:\n        // return  Object.assign({}, state, action.videos)\n        case types.SEARCHED_EMPLOYEE:\n            let newState = {...state};\n            if(action.employee !== undefined){\n            newState = Object.assign({}, state,{employee : action.employee})\n            // newState = Object.assign({}, state, action.employee)\n            }\n            return {...newState};\n        case types.ALL_EMPLOYEES:\n            return handleAllEmployeeList(state, action);\n            \n        default:\n        return state;\n    }\n}","// import { resolve } from \"url\";\n// const baseUrl = 'http://localhost:3010';\nconst baseUrl = 'https://swag-api.herokuapp.com';\nlet that = this;\nexport const EmployeeData = (searchQuery) =>{\n        //1\n        \n        var promise = new Promise((resolve,reject) => {\n//        2\n            fetch(`${baseUrl}/product?firstName=${searchQuery}`)\n            .then(res => {\n                //then is chained to whatever fetch is returning\n                    // 4\n                    // console.log(res.json())\n\n                resolve (res.json());\n             //json takes the response and converts to json \n            })\n        // });\n//        3\n    })\n    // console.log(promise)\n    return promise;\n}\n\n\n\nexport const Employees = () =>{\n    //1\n    var promise = new Promise((resolve,reject) => {\n//        2\n        fetch(`${baseUrl}/products`)\n        .then(res => {\n            //then is chained to whatever fetch is returning\n                // 4\n                // console.log(res.json())\n\n            resolve (res.json());\n         //json takes the response and converts to json \n        })\n    // });\n//        3\n})\n// console.log(promise)\nreturn promise;\n}\n\n\n// export default EmployeeData;//ES6 format of module.export\n","import {all, put, call} from 'redux-saga/effects';\nimport {EmployeeData, Employees} from '../api/api';\nimport * as types from '../constants/actionTypes';\n\nexport function* searchEmployeeSaga({payload}){\n    try{\n        // console.log(payload+'here I am ');\n        const employee = yield call(EmployeeData,payload);\n        const employees = yield call(Employees)\n        // console.log(employees);\n        yield all([\n            // put({type: types.EMPLOYEE_LOAD_SUCCESS, employees}),\n            put({type: types.ALL_EMPLOYEES, employees: employees}),\n            put({type: types.SEARCHED_EMPLOYEE,employee: employee[0]})\n        ]);\n    }catch(error){\n        yield put ({type: 'SEARCH_EMPLOYEE_ERROR', error});\n    }\n}","import {takeLatest} from 'redux-saga/effects';\nimport {searchEmployeeSaga} from './EmployeeSaga';\nimport * as types from '../constants/actionTypes';\n\n\n\nexport default function* watchSearchEmployee(){\n    yield takeLatest(types.SEARCHED_EMPLOYEE, searchEmployeeSaga);\n\n\n}\n\n","import {fork} from 'redux-saga/effects';\nimport watchSearchEmployee from './watcher';\n\nexport default function* startEmployeeSearch(){\n    yield fork(watchSearchEmployee);\n}\n\n","import {createStore, applyMiddleware} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configureStore = () =>{\n    const sagaMiddleware = createSagaMiddleware();\n    return {\n        ...createStore(reducer, applyMiddleware(sagaMiddleware)),\n        runSaga: sagaMiddleware.run(rootSaga)\n    };\n};\n\nexport default configureStore;\n// redux saga is a library that aims to make side effects in react-redux applications easier and better","\nimport React, { Component } from 'react';\n// import { request } from 'http';\nimport request from 'superagent';\nimport { Radio, Icon, Form, Input, Row, Col, Button, Select, Cascader } from 'antd';\nimport './addEmployee.css';\n// import { Layout, Menu, Icon } from 'antd';\n// import './index.css'; \n// const { Header, Sider, Content, Footer } = Layout;\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\nconst FormItem = Form.Item;\nconst residences = [{\n    value: 'India',\n    label: 'India',\n}, {\n    value: 'United States',\n    label: 'United States',\n}];\n\nclass AddEmployee extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 0,\n\n        }\n        this.handleMessageInput = this.handleMessageInput.bind(this);\n        this.handleSubmitMessage = this.handleSubmitMessage.bind(this);\n    }\n    onChange = (e) => {\n        console.log('radio checked', e.target.value);\n        this.setState({\n            value: e.target.value,\n        });\n    }\n    handleMessageInput(e) {\n\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n        // console.log(\"xyz\"+this.state.firstName)\n    }\n    handleSubmitMessage(e) {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                console.log(\"values\" + JSON.stringify(values));\n                // request.post('https://swag-api.herokuapp.com/product')\n                // .send(values)\n                // .set('Accept', 'application/json')\n                // .end((err, res) => {\n                //     if (err) {\n                //         console.log('no error');\n                //     } else {\n                //         console.log('success');\n                //     }\n                // });\n\n            }\n        });\n        const data = {\n            // firstName: this.state.firstName,\n            // lastName: this.state.lastName,\n            // emailAddress: this.state.emailAddress,\n            // homePhone: this.state.homePhone,\n            // workPhone: this.state.workPhone,\n            // dob: this.state.dob\n        };\n        // console.log(data);\n        // request.post('https://swag-api.herokuapp.com/product')\n        //     .send(data)\n        //     .set('Accept', 'application/json')\n        //     .end((err, res) => {\n        //         if (err) {\n        //             console.log('no error');\n        //         } else {\n        //             console.log('success');\n        //         }\n        //     });\n\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n\n        const prefixSelector = getFieldDecorator('prefix', {\n            initialValue: '1',\n        })(\n            <Select style={{ width: 70 }}>\n                <Option value=\"1\">+1</Option>\n                <Option value=\"91\">+91</Option>\n            </Select>\n        );\n        return (\n            <div>\n                <div >\n                    <Form >\n                        <h1>Add Applicant</h1>\n\n                        <Row gutter={80}>\n\n                            <Col span={4}>\n                                <div className=\"picture\">\n                                    <img src='http://icons.iconarchive.com/icons/paomedia/small-n-flat/512/user-male-icon.png' default='image' height='200px' width='200px'></img>\n                                </div>\n                            </Col>\n                            <Col span={10} >\n                                <Row >\n                                    <FormItem {...formItemLayout} label='First-Name'>\n                                        {getFieldDecorator('firstName', {\n                                            rules: [{ required: true, message: 'Please input your username!' }],\n                                        })(\n                                            <Input\n                                                name=\"firstName\"\n                                                type=\"text\"\n                                                value={this.state.firstName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"first name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row >\n                                    <FormItem {...formItemLayout} label='Last-Name'>\n                                        {getFieldDecorator('lastName', {\n                                            rules: [{ required: true, message: 'Please input your lastName!' }],\n                                        })(\n                                            <Input\n                                                name=\"lastName\"\n                                                type=\"value\"\n                                                value={this.state.lastName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"last name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label=\"email\">\n                                        {getFieldDecorator('email', {\n                                            rules: [{\n                                                type: 'email', message: 'The input is not valid E-mail!',\n                                            }, {\n                                                required: true, message: 'Please input your E-mail!',\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"emailAddress\"\n                                                type=\"value\"\n                                                value={this.state.homePhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Email Address\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Work-Phone'>\n                                        {getFieldDecorator('workphone', {\n                                            rules: [{ required: true, message: 'Please input your number!' }],\n                                        })(\n                                            <Input\n                                                type=\"number\" addonBefore={prefixSelector} style={{ width: '100%' }} placeholder=\"work-phone\"\n                                                name=\"workPhone\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='SSN'>\n                                        {getFieldDecorator('SSN', {\n                                            rules: [{ required: true, message: 'Please input your SSN number!' }],\n                                        })(\n                                            <Input\n                                                name=\"SSN\"\n                                                type=\"number\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"xx-xxx-xxxx\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Skype-ID'>\n                                        {getFieldDecorator('skype-ID', {\n                                            rules: [{ required: true, message: 'Please input your skype-ID!' }],\n                                        })(\n                                            <Input\n                                                name=\"skypeID\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"skype-ID\"\n                                            />)}\n                                    </FormItem>\n\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='facebook-ID'>\n                                        {getFieldDecorator('facebook', {\n                                            rules: [{ required: true, message: 'Please input your facebook ID!' }],\n                                        })(\n                                            <Input\n                                                name=\"facebook\"\n                                                type=\"value\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Facebook profile URL\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Address'>\n                                        {getFieldDecorator('address', {\n                                            rules: [{ required: true, message: 'Please input your address!' }],\n                                        })(\n                                            <Input\n                                                name=\"address\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Apt or unit no.\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Clearance'>\n                                        {getFieldDecorator('Clearance', {\n                                            rules: [{ required: true, message: 'Please select your clearance!' }],\n                                        })(\n                                            <RadioGroup onChange={this.onChange} value={this.state.value}>\n                                                <Radio value={1}>YES</Radio>\n                                                <Radio value={2}>NO</Radio>\n                                            </RadioGroup>)}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label=\" Residence\">\n                                        {getFieldDecorator('residence', {\n                                            initialValue: ['United States'],\n                                            rules: [{ type: 'array', required: true, message: 'Please select your country of residence!' }],\n                                        })(\n                                            <Cascader options={residences} />\n                                        )}\n\n                                    </FormItem>\n\n                                    {/* <Input\n                                        name=\"Country\"\n                                        type=\"value\"\n                                        value={this.state.dob}\n                                        onChange={this.handleMessageInput}\n                                        placeholder=\"Country\"\n                                    /> */}\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='State'>\n                                        {getFieldDecorator('State', {\n                                            rules: [{ required: true, message: 'Please input your State!' }],\n                                        })(\n                                            <Input\n                                                name=\"State\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"State\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Technology'>\n                                        {getFieldDecorator('Technology', {\n                                            rules: [{ required: true, message: 'Please input your Technology!' }],\n                                        })(\n                                            <Input\n                                                name=\"technology\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Technology\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Primary-skills'>\n                                        {getFieldDecorator('Primary-skills', {\n                                            rules: [{ required: true, message: 'Please input your Primary skills!' }],\n                                        })(\n                                            <Input\n                                                name=\"primary-skills\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Primary-skills\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem style={{ float: 'right', width: '66.5%' }}>\n                                        {/* {getFieldDecorator('submit', { */}\n                                        {/* rules: [{ required: true, message: 'Please input your skills!' }], */}\n                                        {/* })( */}\n                                        <Button type='Submit' onClick={this.handleSubmitMessage}>Submit</Button>\n                                        {/* )} */}\n                                    </FormItem>\n                                </Row>\n                            </Col>\n                            <Col span={10}>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Middle-Name'>\n                                        {getFieldDecorator('middleName', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"middleName\"\n                                                type=\"text\"\n                                                value={this.state.firstName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"middle name\"\n                                            />\n                                        )}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Nick-Name'>\n                                        {getFieldDecorator('Nick-Name', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"nickname\"\n                                                type=\"value\"\n                                                value={this.state.lastName}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"nick name\"\n                                            />\n                                        )}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Date-Of-Birth'>\n                                        {getFieldDecorator('DOB', {\n                                            rules: [{ required: true, message: 'please input your date of birth' }],\n                                        })(\n                                            <Input\n                                                name=\"dob\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"MM-DD-YYYY\"\n                                            />\n                                        )}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Home-Phone'>\n                                        {getFieldDecorator('homePhone', {\n                                            rules: [{\n                                                required: false,\n                                                // message: 'Please input your home-phone number!' \n                                            }],\n                                        })(\n                                            <Input type='number' addonBefore={prefixSelector} style={{ width: '100%' }} placeholder=\"home-phone\" />\n                                        )}\n\n                                    </FormItem>\n                                    {/* <Input\n                                        name=\"homePhone\"\n                                        type=\"value\"\n                                        value={this.state.homePhone}\n                                        onChange={this.handleMessageInput}\n                                        placeholder=\"home-phone\"\n                                    /> */}\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Linked-In'>\n                                        {getFieldDecorator('Linked-In', {\n                                            rules: [{\n                                                required: false,\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"linkedIn\"\n                                                type=\"value\"\n                                                value={this.state.workPhone}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"linkedIn profile URL\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Twitter'>\n                                        {getFieldDecorator('twitter', {\n                                            rules: [{\n                                                required: false,\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"twitter\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Twitter Profile URL\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Work-Authorization'>\n                                        {getFieldDecorator('work-authorization', {\n                                            rules: [{\n                                                required: true, message: 'please input your work authorization'\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"work Authorization\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Work-Authorization\"\n                                            />)}\n\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='City'>\n                                        {getFieldDecorator('City', {\n                                            rules: [{\n                                                required: true, message: 'please input your City'\n                                            }],\n                                        })(\n                                            <Input\n                                                name=\"city\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"City\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Relocation'>\n                                        {getFieldDecorator('relocation', {\n                                            rules: [{ required: true, message: 'Please select your relocation!' }],\n                                        })(\n                                            <RadioGroup onChange={this.onChange} value={this.state.value}>\n                                                <Radio value={1}>YES</Radio>\n                                                <Radio value={2}>NO</Radio>\n                                            </RadioGroup>)}\n                                    </FormItem>\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Postal-Code'>\n                                        {getFieldDecorator('Postal-Code', {\n                                            rules: [{ required: true, message: 'Please enter your Postal Code!' }],\n                                        })(\n                                            <Input\n                                                name=\"postal-code\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"postal-code\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Job-Title'>\n                                        {getFieldDecorator('Job-Title', {\n                                            rules: [{ required: true, message: 'Please enter your Job-Title!' }],\n                                        })(\n                                            <Input\n                                                name=\"Job-title\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"Job-title\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                                <Row>\n                                    <FormItem {...formItemLayout} label='Skills'>\n                                        {getFieldDecorator('Skills', {\n                                            rules: [{ required: false }],\n                                        })(\n                                            <Input\n                                                name=\"skills\"\n                                                type=\"value\"\n                                                value={this.state.dob}\n                                                onChange={this.handleMessageInput}\n                                                placeholder=\"skills\"\n                                            />)}\n                                    </FormItem>\n\n                                </Row>\n                            </Col>\n\n\n                        </Row>\n\n                    </Form>\n                </div >\n            </div >\n        );\n    }\n}\n\n\nconst wrappedAddEmployee = Form.create()(AddEmployee)\nexport default wrappedAddEmployee;\n","import * as types from '../constants/actionTypes';\n\nexport const searchedEmployeeAction = (payload) => ({\n    type: types.SEARCHED_EMPLOYEE,\n    payload\n})","import React, { Component } from 'react';\nimport EmployeeData from '../../api/api';\nimport {searchedEmployeeAction} from '../../actions/employeeActions';\nimport {connect} from 'react-redux';\nimport {Form, Input, Button} from 'antd';\nimport './addEmployee.css';\nimport { cloneableGenerator } from 'redux-saga/utils';\nimport { Table } from 'antd';\n// import employeeSearch from '../../reducers/employeeSearch';\nclass SearchEmployee extends Component {\n\n    constructor(props){\n        super(props);\n          this.state = {\n            value:''\n          }\n          // this.handleUserData = this.handleUserdata.bind(this)\n          this.handleSubmitMessage = this.handleSubmitMessage.bind(this)\n          this.handleMessageInput = this.handleMessageInput.bind(this)\n        }\n    componentDidMount(){\n      this.props.dispatch(searchedEmployeeAction())\n        }\n    \n    handleSubmitMessage(e){\n      e.preventDefault();\n      const data = this.state.value;\n      console.log(data);\n      this.props.dispatch(searchedEmployeeAction(data))\n\n      }\n    \n    handleMessageInput(e){\n      this.setState({\n        value: e.target.value\n    });\n    }\n\n\n  render() {\n    const empdata = \n    this.props.employees;\n\n    const columns = [{\n      title: 'first name',\n      dataIndex: 'firstName',\n      // key: '10',\n    }, {\n      title: 'lastName',\n      dataIndex: 'lastName',\n      // key: '2',\n    }, {\n      title: 'homePhone',\n      dataIndex: 'homePhone',\n      // key: 'homePhone',\n    }]; \n    // console.log(this.props);\n    return (  \n      <div>\n            <div className=\"input-form\"> \n            <Form onSubmit={this.handleSubmitMessage}>\n              <Input \n              type=\"text\" \n              placeholder=\"search employee here\"\n              value={this.state.value}\n              onChange = {this.handleMessageInput}\n              />\n              <Button onClick={this.handleSubmitMessage}>search</Button>\n\n            </Form>            \n            </div>\n            <div>\n                  <p> {this.props.searchedEmployee} </p>\n            <div>\n                <Table columns={columns} dataSource={empdata} size=\"middle\" />\n                {/* <h4>Small size table</h4>\n                 <Table columns={columns} dataSource={data} size=\"small\" /> */}\n            </div>\n     \n            </div>\n      </div>\n\n    );\n  }\n}\nSearchEmployee.propTypes = {\n  // Define your PropTypes here\n  };\nconst mapStateToProps = (state) => {\n  // console.log('hello ' + JSON.stringify(state))\n  // const jsondata = Object.keys(state.employee.employees).map(function(key) {\n  //   return [state.employee.employees[key]];\n  // })\n  return {\n    searchedEmployee: state.employee.employee.firstName,\n    employees: state.employee.employees\n  }\n}\n\n\n\nexport default connect(mapStateToProps)(SearchEmployee);\n","import React, { Component } from 'react';\nimport './dashBoard.css';\n// import ContentData from '../content/index.js';\nimport AddEmployee from '../employeeData/addEmployee';\nimport SearchEmployee from '../employeeData/searchEmployee';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport { NavLink, Link } from \"react-router-dom\";\n\n\nconst { Header, Content, Footer, Sider, Row, Col } = Layout;\nconst SubMenu = Menu.SubMenu;\n\nclass DashBoard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAddEmp: false,\n      isSearchEmp: false\n    };\n  }\n\n  onButtonClicked = (isAdd) => {\n    if (isAdd === \"add\") {\n      this.setState({ isAddEmp: true, isSearchEmp: false });\n    } else {\n      this.setState({ isSearchEmp: true, isAddEmp: false });\n    }\n  }\n  // state = {\n  //   collapsed: false,\n  // };\n\n  // toggle = () => {\n  //   this.setState({\n  //     collapsed: !this.state.collapsed,\n  //   });\n  // }\n\n  render() {\n\n    const { isAddEmp, isSearchEmp } = this.state;\n\n\n    return (\n      // <div>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider\n        // collapsible\n        // collapsed={this.state.collapsed}\n        // onCollapse={this.onCollapse}\n        >\n          <div className=\"logo\" />\n          <Menu defaultSelectedKeys={['1']} mode=\"inline\">\n            <img src=\"https://rsrit.com/wp-content/uploads/2017/12/logo_dark.png\" alt=\"image\" width=\"200px\" height=\"70px\"></img>\n\n            <SubMenu\n              key=\"sub1\"\n              title={<span><Icon type=\"user\" /><span>Perosnal Details</span></span>}\n            >\n              <Menu.Item key=\"1\" onClick={() => this.onButtonClicked(\"add\")} >Add Applicant</Menu.Item>\n              <Menu.Item key=\"2\" onClick={() => this.onButtonClicked(\"\")}>Search Applicant</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"3\">\n              <Icon type=\"desktop\" />\n              <span>Documents</span>\n            </Menu.Item>\n            <SubMenu\n              key=\"sub2\"\n              title={<span><Icon type=\"user\" /><span>Education Details</span></span>}\n            >\n              <Menu.Item key=\"4\">Tom</Menu.Item>\n              <Menu.Item key=\"5\">Bill</Menu.Item>\n              <Menu.Item key=\"6\">Alex</Menu.Item>\n            </SubMenu>\n            <SubMenu\n              key=\"sub3\"\n              title={<span><Icon type=\"team\" /><span>Certifications</span></span>}\n            >\n              <Menu.Item key=\"7\">Team 1</Menu.Item>\n              <Menu.Item key=\"8\">Team 2</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"9\">\n              <Icon type=\"file\" />\n              <span>Language</span>\n            </Menu.Item>\n            <Menu.Item key=\"10\">\n              <Icon type=\"file\" />\n              <span>Work Experience</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }} />\n          <Content style={{ margin: '24px 16px', padding: 24, background: '#fff', minHeight: 580 }}>\n            {/* <Link to={{ pathname: \"/AddEmployee\" }}>Add Employee</Link>\n            {\"|\"}\n            <Link to={{ pathname: \"/SearchEmployee\" }}>Search Employee</Link> */}\n            {(isAddEmp ? (<AddEmployee {...this.props} />) : (\"\"))}\n            {(isSearchEmp ? (<SearchEmployee  {...this.props} />) : (\"\"))}\n\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            {/* Ant Design ©2018 Created by Ant UED */}\n          </Footer>\n        </Layout>\n      </Layout>\n\n      // {/* </div> */}\n\n    );\n  }\n}\n\n\n\nexport default DashBoard;\n","import React from \"react\";\nimport { Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\n// import Login from \"../components/Login\";\n// import Home from \"../components/Home\";\n// import CreateNewRequest from \"../components/CreateNewRequest\";\n// import React from \"react\";\n// import { Route, IndexRoute} from 'react-router';\n\n// import {  Switch, Redirect, BrowserRouter } from \"react-router-dom\";\n//import Login from \"../components/login/login\";\nimport DashBoard from \"./components/dash-board/dashBoard\";\n// import contentData from '../components/content/index';\nimport AddEmployee from './components/employeeData/addEmployee';\nimport SearchEmployee from './components/employeeData/searchEmployee';\n// import HomePage from './components/HomePage';\n// import CreateNewRequest from \"../components/CreateNewRequest\";\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\n\n\n// Map components to different routes.\n// The parent component wraps other components and thus serves as  the entrance to \n// other React components.\n// IndexRoute maps HomePage component to the default route\nconst store = configureStore();\n\nexport default () => {\n    return (\n        // <Provider store={store}>\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/DashBoard\" render={props => <DashBoard {...props} />} />\n                {/* <Route exact path=\"/home\" render={props => <Home {...props} />} /> */}\n                <Route exact path=\"/AddEmployee\" render={props => <AddEmployee {...props} />} />\n                <Route exact path=\"/SearchEmployee\" render={props => <SearchEmployee {...props} />} />\n\n                <Redirect to=\"/AddEmployee\" />\n            </Switch>\n        </BrowserRouter>\n        //   </Provider>\n    )\n};\n\n// export default (\n    // <Route path =\"/\" component ={App}>\n    //     {/* <IndexRoute component ={DashBoard} /> */}\n    //     <Route path = 'AddEmployee' component = {AddEmployee} />\n    //     <Route path = 'SearchEmployee' component = {SearchEmployee} />\n    // </Route>\n\n//     <Route path =\"/\" component ={App}>\n//         <Route path = 'SearchEmployee' component = {SearchEmployee} />\n//         <Route path = 'AddEmployee' component = {AddEmployee} />\n//     </Route>\n// );\n\n// export default () => {\n//   return (\n\n\n//     <BrowserRouter>\n//       <Switch>\n//         {/* <Route exact path=\"/login\" render={props => <Login {...props} />} /> */}\n//         <IndexRoute path=\"/dashBoard\" component = {DashBoard} />\n//         {/* <Route exact path=\"/createNewRequest\" render={props => <CreateNewRequest {...props} />} /> */}\n//         <Route path = 'AddEmployee' component = {AddEmployee} />\n//         <Route path = 'SearchEmployee' component = {SearchEmployee} />\n//         <Redirect to=\"/dashBoard\" />\n//       </Switch>\n//     </BrowserRouter>\n//   );\n// };","import React, { Component } from 'react';\nimport {IndexLink, Link} from 'react-router';\nimport PropTypes from 'prop-types';\nimport AddEmployee from '../components/employeeData/addEmployee';\nimport DashBoard from '../components/dash-board/dashBoard';\nimport Routes from '../routes';\nimport configureStore from '../store/configureStore';\n// import logo from './logo.svg';\nimport './App.css';\n// import Header from '../components/Header';\nimport { Provider } from 'react-redux';  \n\n// import logo from './logo.svg';\n// import './App.css';\nconst store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n            {/* <Provider store={store}> */}\n\n                <Routes />\n\n\n          {/* </Provider> */}\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport configureStore from './store/configureStore';\nimport App from './containers/App';\n// import routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\nReactDOM.render(\n    <BrowserRouter>\n    <Provider store={store}>\n        < App />\n    </Provider>\n    </BrowserRouter>\n    , \n    document.getElementById('root'));\n    \n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}